plot(x, y)
y = exp(-3*z^2/1^2)
plot(x, y)
z = seq(-5,5,by = 0.01)
y = exp(-3*z^2/1)
plot(x, y)
plot(z, y)
y = exp(-3*z^2/2)
plot(z, y)
y = exp(-3*z^2/3)
plot(z, y)
y = exp(-3*z^2/4)
plot(z, y)
factorial(17)/factorial(13)/factorial(3)
17 * 16 * 15 * 14
17 * 16 * 15 * 14/6
factorial(17)/factorial(12)/factorial(4)
factorial(17)/factorial(11)/factorial(5)
x = seq(0,1,by = 0.001)
y = 9250* x^3 * (1-x)^13
x = seq(0,1,by = 0.001)
y = 9250* x^3 * (1-x)^13 +  30940* x^4 * (1-x)^12 +  74256* x^5 * (1-x)^11
plot(x, y)
x = 0
y = 9250* x^3 * (1-x)^13 +  30940* x^4 * (1-x)^12 +  74256* x^5 * (1-x)^11
y
x = 1
y = 9250* x^3 * (1-x)^13 +  30940* x^4 * (1-x)^12 +  74256* x^5 * (1-x)^11
y
college <- read.csv("~/Google Drive/5223 Multivar/Data/College.csv",as.is = TRUE)
par(mfrow = c(1,3))
for(i in 1:3){
qqnorm(college[,i], main=colnames(college)[i])
qqline(college[,i])
}
#multivariate testing
n = nrow(college);p = ncol(college)
N
n
p
college.matrix <- as.matrix(college)
xbar <- colMeans(college.matrix)
S = cov(college.matrix)
mu0 <- c(500, 50, 30)
T2 =  n *t(xbar-mu0) %*% solve(S) %*% (xbar-mu0)
T2
#pvalue
pf((n-p)/((n-1)*p) * T2, df1=p, df2=n-p,lower.tail = FALSE)
n * sum((xbar-mu0) * solve(S,xbar-mu0))
#pvalue
1- pf((n-p)/((n-1)*p) * T2, df1=p, df2=n-p)
#pvalue
pf((n-p)/((n-1)*p) * T2, df1=p, df2=n-p,lower.tail = FALSE)
college <- read.csv("~/Google Drive/5223 Multivar/Data/College.csv",as.is = TRUE)
par(mfrow = c(1,3))
for(i in 1:3){
qqnorm(college[,i], main=colnames(college)[i])
qqline(college[,i])
}
#multivariate testing
n = nrow(college);p = ncol(college)
college.matrix <- as.matrix(college)
xbar <- colMeans(college.matrix)
S = cov(college.matrix)
mu0 <- c(500, 50, 30)
T2 =  n *t(xbar-mu0) %*% solve(S) %*% (xbar-mu0)
#pvalue
pf((n-p)/((n-1)*p) * T2, df1=p, df2=n-p,lower.tail = FALSE)
for(i in 1:3){boxcox(company[,i] ~ 1, xlab=colnames(company)[i], ylab="")}
library("MASS")
par(mfrow=c(1,3))
for(i in 1:3){boxcox(company[,i] ~ 1, xlab=colnames(company)[i], ylab="")}
company <- read.csv("~/Google Drive/5223 Multivar/Data/Companies.csv")
par(mfrow = c(1,3))
for(i in 1:3){
qqnorm(company[,i], main=colnames(company)[i])
qqline(company[,i])
}
library("MASS")
par(mfrow=c(1,3))
for(i in 1:3){boxcox(company[,i] ~ 1, xlab=colnames(company)[i], ylab="")}
scatterplotMatrix(college)
library("car")
scatterplotMatrix(college)
scatterplotMatrix(college)
pairs(college)
And there seem to be linear relationship between variables.
n = nrow(lumber);p = ncol(lumber)
# Confidence ellipse for pairs (mu1, mu2)
size <- sqrt((n-1)*p/(n-p) * qf(.95, p, n-p))
S = cov(lumber)
xbar <- colMeans(lumber)
plot(ellipse(x =(1/n)*S, centre=xbar, t=size), type="l",
xlab="mu1", ylab="mu2", main="95% confidence ellipse for (mu1, mu2)",ylim = c(7000,10500))
lumber <- read.csv("~/Google Drive/5223 Multivar/Data/Lumber.csv", as.is = TRUE)
par(mfrow = c(1,2))
for(i in 1:2){
qqnorm(lumber[,i], main=colnames(lumber)[i])
qqline(lumber[,i])
}
par(mfrow = c(1,1))
plot(x2~x1, data = lumber, pch = 16)
n = nrow(lumber);p = ncol(lumber)
# Confidence ellipse for pairs (mu1, mu2)
size <- sqrt((n-1)*p/(n-p) * qf(.95, p, n-p))
S = cov(lumber)
xbar <- colMeans(lumber)
plot(ellipse(x =(1/n)*S, centre=xbar, t=size), type="l",
xlab="mu1", ylab="mu2", main="95% confidence ellipse for (mu1, mu2)",ylim = c(7000,10500))
xbar <- colMeans(lumber)
xbar
library("ellipse")
n = nrow(lumber);p = ncol(lumber)
n =
s
n = nrow(lumber);p = ncol(lumber)
n
p
colMeans(lumber)
cov(lumber)
S = cov(lumber)
cov(lumber)
pairs(lumber)
pairs(milk)
milk <-read.csv("~/Google Drive/5223 Multivar/Data/Milk.csv",as.is = TRUE)
par(mfrow = c(1,3))
for(i in 1:3){
qqnorm(milk[,i], main=colnames(milk)[i])
qqline(milk[,i])
}
pairs(milk)
plot(0,3)
points(o,2)
points(0,2)
plot(0,3,ylim = c(0,5)
plot(0,3,ylim = c(0,5))
points(0,2)
plot(0,3,ylim = c(0,5))
points(0,2)
c(0,3) %*% c(0,2)
c(0,3) %*% c(0,2)/ sqrt(2)
norm(as.matrix(c(0,2)))
c(0,3) %*% c(0,2)/2
plot(0,3,ylim = c(0,5))
points(0,1)
c(0,3) %*% c(0,1)/2
c(0,3) %*% c(0,1)/1
points(0,2)/2
c(0,2)/2
plot(3,4,ylim = c(0,5),xlim = c(0,5))
points(1,1)
c(3,4) %*% c(1,1)/1
c(3,4) %*% c(1,1)/norm(c(1,1))
c(3,4) %*% c(1,1)/norm(as.matrix(c(1,1)))
2 %*% c(1,1)/norm(as.matrix(c(1,1)))
norm(as.matrix(c(1,1)))
norm(as.matrix(c(2,2)))
norm(as.matrix(c(1,2)))
norm(as.matrix(c(2,4)))
norm(as.matrix(c(1,3)))
norm(as.matrix(c(3,9)))
plot(4,3,ylim = c(0,5),xlim = c(0,5))
vh = c(2,2)
c(3,4) %*% vh/norm(as.matrix(vh))
xv <- c(3,4) %*% vh/norm(as.matrix(vh))
xv1 <- c(3,4) %*% vh/norm(as.matrix(vh))
xv <- c(3,4) %*% vh/norm(as.matrix(vh))
xv <- c(3,4) %*% vh/norm(as.matrix(vh));xv
c(3,4) %*% vh
vh1 <- c(1,1)
vh1 <- c(0.5,0.5)
xv2 <- c(3,4) %*% vh1/norm(as.matrix(vh1));xv2
c = 2
2 %*% vh/norm(as.matrix(vh));xv
2 %*% vh/norm(as.matrix(vh))
2 *  vh %*% vh/norm(as.matrix(vh))
2 * vh1 %*% vh1/norm(as.matrix(vh1))
c(3,4) %*% vh
c(3,4) %*% vh1
2 *  vh %*% vh/norm(as.matrix(vh))
2 * vh1 %*% vh1/norm(as.matrix(vh1))
vh %*% vh/norm(as.matrix(vh))
vh1 %*% vh1/norm(as.matrix(vh1))
points(3,3)
plot(4,3,ylim = c(0,5),xlim = c(0,5))
points(3,3)
plot(4,3,ylim = c(0,5),xlim = c(0,5),col = "red")
points(3,3)
points(2,2)
plot(4,3,ylim = c(0,5),xlim = c(0,5),col = "red")
plot(4,3,ylim = c(0,5),xlim = c(0,5),col = "red")
plot(4,3,ylim = c(0,5),xlim = c(0,5),col = "red")
points(2,2)
w = points(2,2)
w %*% vh/norm(as.matrix(vh))
w %*% vh
vh = c(2,2)
points(2,2)
w = c(2,2)
w %*% vh/norm(as.matrix(vh))
t(w) %*% vh/norm(as.matrix(vh))
c(2,2)*  vh %*% vh/norm(as.matrix(vh))
w   %*% vh/norm(as.matrix(vh))
w   %*% vh1/norm(as.matrix(vh1))
w %*% vh1/norm(as.matrix(vh1))
t(w) %*% vh/norm(as.matrix(vh))
w %*% vh1/norm(as.matrix(vh1))
vh1
x = rnorm(100,2,2)
plot(x)
mean(x)
x = rnorm(1000,2,2)
plot(x)
mean(x)
mean(x);sd(x)
(x-mean(x))^2
sum((x-mean(x))^2)
sum((x-mean(x))^2)/10000
sum((x-mean(x))^2)/1000
sum((x-mean(x))^2)/999
x = (x-mean(x))/sum((x-mean(x))^2)
mean(x);sd(x)
x = rnorm(1000,2,2)
plot(x)
mean(x);sd(x)
x = (x-mean(x))/sqrt(sum((x-mean(x))^2))
mean(x);sd(x)
sqrt(sum((x-mean(x))^2))
x = rnorm(1000,2,2)
plot(x)
mean(x);sd(x)
(x-mean(x))
sqrt(sum((x-mean(x))^2))
x = (x-mean(x))/sqrt(sum((x-mean(x))^2))
mean(x);sd(x)
1/999
mean(x);var(x)
mean(x)
cor(x,x)
sqrt(sum((x-mean(x))^2))
1/0.3^2
qt(0.75,8)
y = c(10, 10, 12, 11, 9)
mean(y)
cov(y)
cov(y)
sum((y - mean(y))^2)
sum((y - 5.2)^2)/2
sum((y - 5.2)^2)
y = c(10, 10, 12, 11, 9)
mean(y)
sum((y - 10.4)^2)
sum((y - 10.4)^2)/2
c(18 + 22 + 16 + 15)
c(18 + 22 + 16 + 16)
72/4
###Input
#parameter values
max_depth = c(4,6,8)
min_child_weight <- seq(1,6,2)
if(!require("EBImage")){
source("https://bioconductor.org/biocLite.R")
biocLite("EBImage")
}
if(!require("gbm")){
install.packages("gbm")
}
library("EBImage")
library("gbm")
experiment_dir <- "./data/zipcode/" # This will be modified for different data sets.
img_train_dir <- paste(experiment_dir, "train/", sep="")
img_test_dir <- paste(experiment_dir, "test/", sep="")
model_values <- seq(3, 11, 2)
model_labels = paste("GBM with depth =", model_values)
model_values
label_train <- read.table(paste(experiment_dir, "train_label.txt", sep=""),
header=F)
label_train <- as.numeric(unlist(label_train) == "9")
label_train
label_train
experiment_dir
label_train
label_train
source("./lib/feature.R")
tm_feature_train <- NA
if(run.feature.train){
tm_feature_train <- system.time(dat_train <- feature(img_train_dir,
"train",
data_name="zip",
export=TRUE))
}
source("./lib/feature.R")
tm_feature_train <- NA
if(run.feature.train){
tm_feature_train <- system.time(dat_train <- feature(img_train_dir,
"train",
data_name="zip",
export=TRUE))
}
tm_feature_test <- NA
if(run.feature.test){
tm_feature_test <- system.time(dat_test <- feature(img_test_dir,
"test",
data_name="zip",
export=TRUE))
}
setwd("./ads_spr2017_proj3")
# here replace it with your own path or manually set it in RStudio to where this rmd file is located.
```
experiment_dir <- "./data/zipcode/" # This will be modified for different data sets.
img_train_dir <- paste(experiment_dir, "train/", sep="")
img_test_dir <- paste(experiment_dir, "test/", sep="")
run.cv=TRUE # run cross-validation on the training set
K <- 5  # number of CV folds
run.feature.train=TRUE # process features for training set
run.test=TRUE # run evaluation on an independent test set
run.feature.test=TRUE # process features for test set
model_values <- seq(3, 11, 2)
model_labels = paste("GBM with depth =", model_values)
model_labels
label_train <- read.table(paste(experiment_dir, "train_label.txt", sep=""),
header=F)
label_train <- as.numeric(unlist(label_train) == "9")
experiment_dir
source("./lib/feature.R")
tm_feature_train <- NA
if(run.feature.train){
tm_feature_train <- system.time(dat_train <- feature(img_train_dir,
"train",
data_name="zip",
export=TRUE))
}
tm_feature_test <- NA
if(run.feature.test){
tm_feature_test <- system.time(dat_test <- feature(img_test_dir,
"test",
data_name="zip",
export=TRUE))
}
#save(dat_train, file="./output/feature_train.RData")
#save(dat_test, file="./output/feature_test.RData")
```
source("./lib/train.R")
source("./lib/test.R")
source("./lib/cross_validation.R")
if(run.cv){
err_cv <- array(dim=c(length(model_values), 2))
for(k in 1:length(model_values)){
cat("k=", k, "\n")
err_cv[k,] <- cv(dat_train, label_train, model_values[k], K)$error
}
save(err_cv, file="./output/err_cv.RData")
}
if(run.cv){
load("./output/err_cv.RData")
#pdf("./fig/cv_results.pdf", width=7, height=5)
plot(model_values, err_cv[,1], xlab="Interaction Depth", ylab="CV Error",
main="Cross Validation Error", type="n", ylim=c(0, 0.25))
points(model_values, err_cv[,1], col="blue", pch=16)
lines(model_values, err_cv[,1], col="blue")
arrows(model_values, err_cv[,1]-err_cv[,2], model_values, err_cv[,1]+err_cv[,2],
length=0.1, angle=90, code=3)
#dev.off()
}
load("../output/fit_train_baseline.RData")
getwd()
setwd("~/Google Drive/5243 Data/Spring2018-Project3-Group9/doc")
load("../output/fit_train_baseline.RData")
load("../output/fit_train_baseline.RData")
View(fit_train_baseline)
experiment_dir <- "../data/"
img_train_dir <- paste(experiment_dir, "train/images/", sep="")
img_test_dir <- paste(experiment_dir, "test/", sep="")
list(img_test_dir)
run.feature.test = T
if(run.feature.test){ #for test data
rgb_test <- feature(img_dir = img_test_dir, par = NULL)
save(rgb_test, file="../output/feature_test.RData")
}
source("../lib/feature.R")
# import SIFT test feature
if(run.SIFT.test == T){
SIFT_feature_test <- read.csv('../data/train/SIFT_test.csv',header = F)[,-1]
}
if(run.feature.test){ #for test data
rgb_test <- feature(img_dir = img_test_dir, par = NULL)
save(rgb_test, file="../output/feature_test.RData")
}
img_test_dir
img_test_dir
if(run.feature.test){ #for test data
rgb_test <- feature(img_dir = img_test_dir, par = NULL)
save(rgb_test, file="../output/feature_test.RData")
}
rgb_test <- feature(img_dir = img_test_dir, par = NULL)
rgb_test <- feature(img_dir = img_test_dir, par = NULL)
rgb_feature <- feature(img_dir = img_train_dir, par = NULL)
getwd()
img_test_dir
img_train_dir
rgb_test <- feature(img_dir = img_test_dir, par = NULL)
dim(rgb_test)
list.files(path =img_train_dir )
class(list.files(path =img_train_dir ))
length(list.files(path =img_train_dir ))
#######################################################
### extract RGB feature for training/testing images ###
#######################################################
### Authors: Group 9
### ADS Spring2018
feature <- function(img_dir = NULL, par = NULL){
### extract rgb feature from raw data
###! note that based on rgb algorithm, the process of extract feature is independent
###   from individual to individual. Therefore we can import whole data and extract feature
###   (disregard train and test)
### Input:
###   img_dir -  image directory, with default to "../data/train/images/"
###   par - hyperparameter of rgb
### Output:
###   rgb feature
### load libraries
library("EBImage")
library("grDevices")
if(is.null(img_dir)){
img_dir = "../data/train/images/"
}
### Define the bin number of R, G and B
if(is.null(par)){
# set default number to our tuned best parameter
nR <- 10
nG <- 10
nB <- 10
}
else{
nR <- par$nR
nG <- par$nG
nB <- par$nB
}
rBin <- seq(0, 1, length.out=nR)
gBin <- seq(0, 1, length.out=nG)
bBin <- seq(0, 1, length.out=nB)
mat=array()
freq_rgb=array()
n_files <- length(list.files(img_dir))
rgb_feature=matrix(nrow=n_files, ncol=nR*nG*nB)
if(n_files == 0){
print("no file  in the directory")
return(0)
}
########extract RGB features############
img_name <- list.files(path =img_dir )
for (i in 1:n_files ){
mat <- imageData(readImage(paste0(img_dir, n_files[i])))
mat_as_rgb <-array(c(mat,mat,mat),dim = c(nrow(mat),ncol(mat),3))
freq_rgb <- as.data.frame(table(factor(findInterval(mat_as_rgb[,,1], rBin), levels=1:nR),
factor(findInterval(mat_as_rgb[,,2], gBin), levels=1:nG),
factor(findInterval(mat_as_rgb[,,3], bBin), levels=1:nB)))
rgb_feature[i,] <- as.numeric(freq_rgb$Freq)/(ncol(mat)*nrow(mat))
mat_rgb <-mat_as_rgb
dim(mat_rgb) <- c(nrow(mat_as_rgb)*ncol(mat_as_rgb), 3)
}
return(data.frame(rgb_feature))
}
rgb_test <- feature(img_dir = img_test_dir, par = NULL)
img_name
list.files(path =img_dir )
img_dir = img_test_dir
list.files(path =img_dir)
img_name <- list.files(path =img_dir)
length(list.files(img_dir))
i = 2
paste0(img_dir, n_files[i])
n_files[i]
mat <- imageData(readImage(paste0(img_dir, img_name[i])))
mat
paste0(img_dir, img_name[i])
rm(i)
if(run.feature.test){ #for test data
rgb_test <- feature(img_dir = img_test_dir, par = NULL)
save(rgb_test, file="../output/feature_test.RData")
}
if(run.feature.train){ #for trainning data
rgb_feature <- feature(img_dir = img_train_dir, par = NULL)
save(rgb_feature, file="../output/feature_train.RData")
}
if(run.feature.test){ #for test data
rgb_test <- feature(img_dir = img_test_dir, par = NULL)
save(rgb_test, file="../output/feature_test.RData")
}
if(run.feature.test){ #for test data
rgb_test <- feature(img_dir = img_test_dir, par = NULL)
save(rgb_test, file="../output/feature_test.RData")
}
img_name[i]
i = 10
img_name[i]
paste0(img_dir, img_name[i])
source("../lib/feature.R")
if(run.feature.test){ #for test data
rgb_test <- feature(img_dir = img_test_dir, par = NULL)
save(rgb_test, file="../output/feature_test.RData")
}
dim(rgb_test)
run.feature.train = T
if(run.feature.train){ #for trainning data
rgb_feature <- feature(img_dir = img_train_dir, par = NULL)
save(rgb_feature, file="../output/feature_train.RData")
}
if(run.feature.test){ #for test data
rgb_test <- feature(img_dir = img_test_dir, par = NULL)
save(rgb_test, file="../output/feature_test.RData")
}
