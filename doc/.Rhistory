cov(y)
sum((y - mean(y))^2)
sum((y - 5.2)^2)/2
sum((y - 5.2)^2)
y = c(10, 10, 12, 11, 9)
mean(y)
sum((y - 10.4)^2)
sum((y - 10.4)^2)/2
c(18 + 22 + 16 + 15)
c(18 + 22 + 16 + 16)
72/4
###Input
#parameter values
max_depth = c(4,6,8)
min_child_weight <- seq(1,6,2)
if(!require("EBImage")){
source("https://bioconductor.org/biocLite.R")
biocLite("EBImage")
}
if(!require("gbm")){
install.packages("gbm")
}
library("EBImage")
library("gbm")
experiment_dir <- "./data/zipcode/" # This will be modified for different data sets.
img_train_dir <- paste(experiment_dir, "train/", sep="")
img_test_dir <- paste(experiment_dir, "test/", sep="")
model_values <- seq(3, 11, 2)
model_labels = paste("GBM with depth =", model_values)
model_values
label_train <- read.table(paste(experiment_dir, "train_label.txt", sep=""),
header=F)
label_train <- as.numeric(unlist(label_train) == "9")
label_train
label_train
experiment_dir
label_train
label_train
source("./lib/feature.R")
tm_feature_train <- NA
if(run.feature.train){
tm_feature_train <- system.time(dat_train <- feature(img_train_dir,
"train",
data_name="zip",
export=TRUE))
}
source("./lib/feature.R")
tm_feature_train <- NA
if(run.feature.train){
tm_feature_train <- system.time(dat_train <- feature(img_train_dir,
"train",
data_name="zip",
export=TRUE))
}
tm_feature_test <- NA
if(run.feature.test){
tm_feature_test <- system.time(dat_test <- feature(img_test_dir,
"test",
data_name="zip",
export=TRUE))
}
setwd("./ads_spr2017_proj3")
# here replace it with your own path or manually set it in RStudio to where this rmd file is located.
```
experiment_dir <- "./data/zipcode/" # This will be modified for different data sets.
img_train_dir <- paste(experiment_dir, "train/", sep="")
img_test_dir <- paste(experiment_dir, "test/", sep="")
run.cv=TRUE # run cross-validation on the training set
K <- 5  # number of CV folds
run.feature.train=TRUE # process features for training set
run.test=TRUE # run evaluation on an independent test set
run.feature.test=TRUE # process features for test set
model_values <- seq(3, 11, 2)
model_labels = paste("GBM with depth =", model_values)
model_labels
label_train <- read.table(paste(experiment_dir, "train_label.txt", sep=""),
header=F)
label_train <- as.numeric(unlist(label_train) == "9")
experiment_dir
source("./lib/feature.R")
tm_feature_train <- NA
if(run.feature.train){
tm_feature_train <- system.time(dat_train <- feature(img_train_dir,
"train",
data_name="zip",
export=TRUE))
}
tm_feature_test <- NA
if(run.feature.test){
tm_feature_test <- system.time(dat_test <- feature(img_test_dir,
"test",
data_name="zip",
export=TRUE))
}
#save(dat_train, file="./output/feature_train.RData")
#save(dat_test, file="./output/feature_test.RData")
```
source("./lib/train.R")
source("./lib/test.R")
source("./lib/cross_validation.R")
if(run.cv){
err_cv <- array(dim=c(length(model_values), 2))
for(k in 1:length(model_values)){
cat("k=", k, "\n")
err_cv[k,] <- cv(dat_train, label_train, model_values[k], K)$error
}
save(err_cv, file="./output/err_cv.RData")
}
if(run.cv){
load("./output/err_cv.RData")
#pdf("./fig/cv_results.pdf", width=7, height=5)
plot(model_values, err_cv[,1], xlab="Interaction Depth", ylab="CV Error",
main="Cross Validation Error", type="n", ylim=c(0, 0.25))
points(model_values, err_cv[,1], col="blue", pch=16)
lines(model_values, err_cv[,1], col="blue")
arrows(model_values, err_cv[,1]-err_cv[,2], model_values, err_cv[,1]+err_cv[,2],
length=0.1, angle=90, code=3)
#dev.off()
}
load("../output/fit_train_baseline.RData")
getwd()
setwd("~/Google Drive/5243 Data/Spring2018-Project3-Group9/doc")
load("../output/fit_train_baseline.RData")
load("../output/fit_train_baseline.RData")
View(fit_train_baseline)
experiment_dir <- "../data/"
img_train_dir <- paste(experiment_dir, "train/images/", sep="")
img_test_dir <- paste(experiment_dir, "test/", sep="")
list(img_test_dir)
run.feature.test = T
if(run.feature.test){ #for test data
rgb_test <- feature(img_dir = img_test_dir, par = NULL)
save(rgb_test, file="../output/feature_test.RData")
}
source("../lib/feature.R")
# import SIFT test feature
if(run.SIFT.test == T){
SIFT_feature_test <- read.csv('../data/train/SIFT_test.csv',header = F)[,-1]
}
if(run.feature.test){ #for test data
rgb_test <- feature(img_dir = img_test_dir, par = NULL)
save(rgb_test, file="../output/feature_test.RData")
}
img_test_dir
img_test_dir
if(run.feature.test){ #for test data
rgb_test <- feature(img_dir = img_test_dir, par = NULL)
save(rgb_test, file="../output/feature_test.RData")
}
rgb_test <- feature(img_dir = img_test_dir, par = NULL)
rgb_test <- feature(img_dir = img_test_dir, par = NULL)
rgb_feature <- feature(img_dir = img_train_dir, par = NULL)
getwd()
img_test_dir
img_train_dir
rgb_test <- feature(img_dir = img_test_dir, par = NULL)
dim(rgb_test)
list.files(path =img_train_dir )
class(list.files(path =img_train_dir ))
length(list.files(path =img_train_dir ))
#######################################################
### extract RGB feature for training/testing images ###
#######################################################
### Authors: Group 9
### ADS Spring2018
feature <- function(img_dir = NULL, par = NULL){
### extract rgb feature from raw data
###! note that based on rgb algorithm, the process of extract feature is independent
###   from individual to individual. Therefore we can import whole data and extract feature
###   (disregard train and test)
### Input:
###   img_dir -  image directory, with default to "../data/train/images/"
###   par - hyperparameter of rgb
### Output:
###   rgb feature
### load libraries
library("EBImage")
library("grDevices")
if(is.null(img_dir)){
img_dir = "../data/train/images/"
}
### Define the bin number of R, G and B
if(is.null(par)){
# set default number to our tuned best parameter
nR <- 10
nG <- 10
nB <- 10
}
else{
nR <- par$nR
nG <- par$nG
nB <- par$nB
}
rBin <- seq(0, 1, length.out=nR)
gBin <- seq(0, 1, length.out=nG)
bBin <- seq(0, 1, length.out=nB)
mat=array()
freq_rgb=array()
n_files <- length(list.files(img_dir))
rgb_feature=matrix(nrow=n_files, ncol=nR*nG*nB)
if(n_files == 0){
print("no file  in the directory")
return(0)
}
########extract RGB features############
img_name <- list.files(path =img_dir )
for (i in 1:n_files ){
mat <- imageData(readImage(paste0(img_dir, n_files[i])))
mat_as_rgb <-array(c(mat,mat,mat),dim = c(nrow(mat),ncol(mat),3))
freq_rgb <- as.data.frame(table(factor(findInterval(mat_as_rgb[,,1], rBin), levels=1:nR),
factor(findInterval(mat_as_rgb[,,2], gBin), levels=1:nG),
factor(findInterval(mat_as_rgb[,,3], bBin), levels=1:nB)))
rgb_feature[i,] <- as.numeric(freq_rgb$Freq)/(ncol(mat)*nrow(mat))
mat_rgb <-mat_as_rgb
dim(mat_rgb) <- c(nrow(mat_as_rgb)*ncol(mat_as_rgb), 3)
}
return(data.frame(rgb_feature))
}
rgb_test <- feature(img_dir = img_test_dir, par = NULL)
img_name
list.files(path =img_dir )
img_dir = img_test_dir
list.files(path =img_dir)
img_name <- list.files(path =img_dir)
length(list.files(img_dir))
i = 2
paste0(img_dir, n_files[i])
n_files[i]
mat <- imageData(readImage(paste0(img_dir, img_name[i])))
mat
paste0(img_dir, img_name[i])
rm(i)
if(run.feature.test){ #for test data
rgb_test <- feature(img_dir = img_test_dir, par = NULL)
save(rgb_test, file="../output/feature_test.RData")
}
if(run.feature.train){ #for trainning data
rgb_feature <- feature(img_dir = img_train_dir, par = NULL)
save(rgb_feature, file="../output/feature_train.RData")
}
if(run.feature.test){ #for test data
rgb_test <- feature(img_dir = img_test_dir, par = NULL)
save(rgb_test, file="../output/feature_test.RData")
}
if(run.feature.test){ #for test data
rgb_test <- feature(img_dir = img_test_dir, par = NULL)
save(rgb_test, file="../output/feature_test.RData")
}
img_name[i]
i = 10
img_name[i]
paste0(img_dir, img_name[i])
source("../lib/feature.R")
if(run.feature.test){ #for test data
rgb_test <- feature(img_dir = img_test_dir, par = NULL)
save(rgb_test, file="../output/feature_test.RData")
}
dim(rgb_test)
run.feature.train = T
if(run.feature.train){ #for trainning data
rgb_feature <- feature(img_dir = img_train_dir, par = NULL)
save(rgb_feature, file="../output/feature_train.RData")
}
if(run.feature.test){ #for test data
rgb_test <- feature(img_dir = img_test_dir, par = NULL)
save(rgb_test, file="../output/feature_test.RData")
}
library(pryr)
> install.packages(“pryr”)
install.packages(“pryr”)
library(pryr)
install.packages(“pryr”)
install.packages(pryr)
install.packages("pryr")
library(pryr)
SIFT_feature <- read.csv('../data/train/SIFT_train.csv',header = F)[,-1]
label
label_train <- c(rep(0,1000),rep(1,1000),rep(2,1000))
dim(dat_train)
dim(SIFT_feature)
mem_change(fit_train <- train(dat_train, label_train, par_best))
source("../lib/train.R")
mem_change(fit_train <- train(dat_train, label_train, par_best))
mem_change(fit_train <- train(dat_train, label_train))
mem_change(fit_train <- train(dat_train, label_train, par_best,run.xgboost = T))
mem_change(fit_train <- train(dat_train, label_train,run.xgboost = T))
dat_train =
mem_change(fit_train <- train(SIFT_feature, label_train,run.xgboost = T))
mem_change(fit_train <- train(SIFT_feature, label_train,run.xgboost = T))
gist_train <- read.csv('./data/gist_feature/gistfea512.csv',header = F)
gist_train <- read.csv('./data/gist_feature/gistfea512.csv',header = F)
gist_train <- read.csv('./data/gist_feature/gistfea512.csv',header = F)
setwd("~/Google Drive/5243 Data/Spring2018-Project3-Group9/doc")
gist_train <- read.csv('./data/gist_feature/gistfea512.csv',header = F)
gist_train <- read.csv('../data/gist_feature/gistfea512.csv',header = F)
mem_change(fit_train <- train(gist_train, label_train,run.xgboost = T))
rgb_feasure =   read.csv('../data/rgb_feature.csv',header = F)
dim(rgb_feasure)
rgb_feasure =   read.csv('../data/rgb_feature101212.csv',header = F)
dim(rgb_feasure)
rgb_feasure =   read.csv('../data/rgb_feature',header = F)
rgb_feasure =   read.csv('../data/rgb_feature.csv',header = F)
mem_change(fit_train <- train(rgb_feasure, label_train,run.xgboost = T))
rgb_feasure
rgb_feasure[1,1]
rgb_feasure[1,2]
View(rgb_feasure)
rgb_feasure =   read.csv('../data/rgb_feature.csv',header = F)[-1,]
rgb_feasure[1,1]
View(rgb_feasure)
rgb_feasure =   read.csv('../data/rgb_feature.csv',header = F)
dim(rgb_feasure)
rgb_feasure =   read.csv('../data/rgb_feature.csv',header = F)[-1,-1]
mem_change(fit_train <- train(rgb_feasure, label_train,run.xgboost = T))
rgb_feasure[1,1]
rgb_feasure
mem_change(fit_train <- train(rgb_feasure, label_train,run.xgboost = T))
label_train
dim(rgb_feasure)
rgb_feasure = xgb.DMatrix(data=data.matrix(rgb_feasure),label=label_train)
rgb_feasure =   read.csv('../data/rgb_feature.csv',header = F)[-1,-1]
mem_change(fit_train <- train(rgb_feasure, label_train,run.xgboost = T))
rgb_feasure[2,2]
rgb_feasure =   read.csv('../data/rgb_feature.csv',header = F,as.is = T)[-1,-1]
mem_change(fit_train <- train(rgb_feasure, label_train,run.xgboost = T))
mem_change(fit_train <- train(cbind(gist_train,rgb_feasure), label_train,run.xgboost = T))
rgb_feasure =   read.csv('../data/rgb_feature.csv',header = F,as.is = T)[-1,-1]
mem_change(fit_train <- train(rgb_feasure, label_train,run.xgboost = T))
c1 = cbind(gist_train,rgb_feasure)
mem_change(fit_train <- train(c1, label_train,run.xgboost = T))
dim(gist_train)
dim(rgb_feasure)
dim(c1)
mem_change(fit_train <- train(c1, label_train,run.xgboost = T))
c2 = cbind(gist_train,SIFT_feature)
mem_change(fit_train <- train(c2, label_train,run.xgboost = T))
c3 = cbind(gist_train,SIFT_feature,rgb_feasure)
dim(c3)
mem_change(fit_train <- train(c3, label_train,run.xgboost = T))
mem_change(fit_train <- train(rgb_feasure, label_train,run.xgboost = T))
c1 = cbind(gist_train,rgb_feasure)
mem_change(fit_train <- train(c1, label_train,run.xgboost = T))
c2 = cbind(gist_train,SIFT_feature)
mem_change(fit_train <- train(c2, label_train,run.xgboost = T))
c3 = cbind(gist_train,SIFT_feature,rgb_feasure)
mem_change(fit_train <- train(c3, label_train,run.xgboost = T))
mem_change(fit_train <- train(SIFT_feature, label_train,run.xgboost = T))
mem_change(fit_train <- train(gist_train, label_train,run.xgboost = T))
mem_change(fit_train <- train(gist_train, label_train,run.xgboost = T))
mem_change(fit_train <- train(gist_train, label_train,run.xgboost = T))
if(!require("EBImage")){
source("https://bioconductor.org/biocLite.R")
biocLite("EBImage")
}
packages.used=c("gbm", "xgboost")
# check packages that need to be installed.
packages.needed=setdiff(packages.used,
intersect(installed.packages()[,1],
packages.used))
# install additional packages
if(length(packages.needed)>0){
install.packages(packages.needed, dependencies = TRUE,
repos='http://cran.us.r-project.org')
}
## Loading packages
library("EBImage")
library("gbm")
library("xgboost")
experiment_dir <- "../data/"
img_train_dir <- paste(experiment_dir, "train/images/", sep="")
img_test_dir <- paste(experiment_dir, "test/", sep="")
source("../lib/train.R")
source("../lib/test.R")
source("../lib/feature.R")
source("../lib/cross_validation.R")
source("../lib/tune.R")
set.seed(1234)
run.gbm == T
run.gbm = T
run.SIFT.test = T
load("../output/fit_train_baseline.RData")
fit_train_baseline
if(run.baseline.retrain == T){
tm_train_baseline <- system.time(
fit_train_baseline <- train(SIFT_feature, label_train, par_best_baseline)
)
save(fit_train_baseline, file="../output/fit_train_baseline.RData")
}
run.baseline.retrain = T
if(run.baseline.retrain == T){
tm_train_baseline <- system.time(
fit_train_baseline <- train(SIFT_feature, label_train, par_best_baseline)
)
save(fit_train_baseline, file="../output/fit_train_baseline.RData")
}
par_best_baseline
# decide whether tune parameters
if(run.tune == T){
par_best_baseline <- tune(dat_train ,label_train,
run.xgboost = T,
run.gbm = F,
run.adaboost = F)
save(par_best_baseline,file = "par_best_baseline.RData")
print("Best parameter is:", par_best_baseline)
}
# load best parameter for baseline model
load("../output/par_best_baseline.RData")
par_best_baseline
if(run.baseline.retrain == T){
tm_train_baseline <- system.time(
fit_train_baseline <- train(SIFT_feature, label_train, par_best_baseline)
)
save(fit_train_baseline, file="../output/fit_train_baseline.RData")
}
load("../output/fit_train_baseline.RData")
run.gbm = TRUE   # if choose gbm, then we are running baseline model
run.xgboost = FALSE
run.adaboost = FALSE
run.svm = FALSE
run.merge = FALSE #merge gist and rgb
run.baseline.retrain = FALSE
run.SIFT.test = FALSE
if(run.baseline.retrain == T){
tm_train_baseline <- system.time(
fit_train_baseline <- train(SIFT_feature, label_train, par_best_baseline)
)
save(fit_train_baseline, file="../output/fit_train_baseline.RData")
}
load("../output/fit_train_baseline.RData")
if(run.SIFT.test){
test_baseline_pred <- test(fit_train_baseline,SIFT_feature_test,
run.xgboost = F, run.gbm = T,
run.adaboost = F, par=NULL)
save(test_baseline_pred, file = "../output/test_baseline_pred.RData")
write.csv(test_baseline_pred, file = "../output/test_baseline_pred.csv")
}
test_baseline_pred
load("../output/fit_train_baseline.RData")
fit_train_baseline.RData
if(run.baseline.retrain == T){
tm_train_baseline <- system.time(
fit_train_baseline <- train(SIFT_feature, label_train, par_best_baseline)
)
save(fit_train_baseline, file="../output/fit_train_baseline.RData")
}
run.baseline.retrain = T
if(run.baseline.retrain == T){
tm_train_baseline <- system.time(
fit_train_baseline <- train(SIFT_feature, label_train, par_best_baseline)
)
save(fit_train_baseline, file="../output/fit_train_baseline.RData")
}
load("../output/fit_train_baseline.RData")
run.SIFT.test = T
# import SIFT test feature
if(run.SIFT.test == T){
SIFT_feature_test <- read.csv('../data/test/SIFT_test.csv',header = F)[,-1]
}
dim(SIFT_feature_test)
run.SIFT.test = T
if(run.SIFT.test){
test_baseline_pred <- test(fit_train_baseline,SIFT_feature_test,
run.xgboost = F, run.gbm = T,
run.adaboost = F, par=NULL)
save(test_baseline_pred, file = "../output/test_baseline_pred.RData")
write.csv(test_baseline_pred, file = "../output/test_baseline_pred.csv")
}
fit_train_baseline
fit_train_baseline
load("../output/fit_train_baseline.RData")
fit_train_baseline
par_best_baseline
SIFT_feature
dim(fit_train_baseline)
dim(SIFT_feature)
tm_train_baseline <- system.time(
fit_train_baseline <- train(SIFT_feature, label_train, par_best_baseline)
)
fit_train_baseline <- train(SIFT_feature, label_train, par_best_baseline)
SIFT_feature <- read.csv('../data/train/SIFT_train.csv',header = F)[,-1]
fit_train_baseline <- train(SIFT_feature, label_train, run.gbm = T, par_best_baseline)
fit_train_baseline
run.xgboost = FALSE
run.adaboost = FALSE
fit_train_baseline <- train(SIFT_feature, label_train,run.gbm = TRUE ,run.adaboost = FALSE,run.xgboost = FALSE, par_best_baseline)
fit_train_baseline
save(fit_train_baseline, file="../output/fit_train_baseline.RData")
load("../output/fit_train_baseline.RData")
SIFT_feature_test <- read.csv('../data/test/SIFT_test.csv',header = F)[,-1]
test_baseline_pred <- test(fit_train_baseline,SIFT_feature_test,
run.xgboost = F, run.gbm = T,
run.adaboost = F, par=NULL)
dim(test_baseline_pred)
test_baseline_pred
save(test_baseline_pred, file = "../output/test_baseline_pred.RData")
write.csv(test_baseline_pred, file = "../output/test_baseline_pred.csv")
test_baseline_pred
a = read.csv("../test/labels.csv")
getwd()
a = read.csv("../data/test/labels.csv")
a
a
a$Baseline = test_baseline_pred
a
a$Baseline = test_baseline_pred + 1
a
write.csv(a,"../data/test/labels.csv")
SIFT_feature_test
fit_train_baseline
load("../output/fit_train_baseline.RData")
fit_train_baseline.RData
fit_train_baseline
